import { callMethodRequestSchema } from '@worksheets/schemas-applications';
import { executeWorksheetRequestSchema } from '@worksheets/schemas-worksheets';
import { z } from 'zod';

export type ExecuteWorksheet = z.infer<typeof executeWorksheetRequestSchema>;
export type CallMethodOptions = z.infer<typeof callMethodRequestSchema>;

// TODO: import from server_settings without pulling in all the other dependencies (or keys).
export const DEFAULT_HOST_URL = 'https://api.worksheets.dev';

export type WorksheetsClientOptions = {
  baseUrl: string;
  credentials: {
    apiKey: string;
  };
};

/**
 * The worksheets client is a lightweight wrapper around the worksheets API.
 */
export class WorksheetsClient {
  private options: WorksheetsClientOptions;
  constructor(options: WorksheetsClientOptions) {
    this.options = options;
  }

  /**
   * If you did not set a `apiKey` in the constructor,
   * you cannot execute worksheets by name.
   * @returns execution id to poll for success or failure
   */
  async execute({
    worksheetId,
    ...options
  }: ExecuteWorksheet): Promise<string> {
    if (this.options.credentials.apiKey === undefined) {
      const result = await fetch(this.url(`/api/execute/${worksheetId}`), {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(options),
      });
      return await result.json();
    } else {
      // use private endpoint.
      const result = await fetch(
        this.url(`/api/worksheet/${worksheetId}/execute`),
        {
          method: 'POST',
          headers: this.authHeader(),
          body: JSON.stringify(options),
        }
      );
      return await result.json();
    }
  }

  /**
   * Given an execution id generated by `execute`, returns the status and results of a worksheet execution.
   */
  async poll(executionId: string) {
    const result = await fetch(this.url(`/api/executions/${executionId}`), {
      headers: this.authHeader(),
    });

    return await result.json();
  }

  /**
   * Executes an application method.
   * @param options
   * Required: path
   * Optional: input, connection, metadata
   * @returns the result of executing the application method.
   * TODO: implement type safety for output.
   */
  async call({ path, ...options }: CallMethodOptions): Promise<unknown> {
    const result = await fetch(this.url(`/api/call/${path}`), {
      headers: this.authHeader(),
      body: JSON.stringify(options),
    });

    return await result.json();
  }

  /**
   * A simple ping to see if your credentials are working
   */
  async identify() {
    try {
      const result = await fetch(this.url(`/api/user/identify`), {
        method: 'POST',
        headers: this.authHeader(),
        body: JSON.stringify({ echo: 'auth-test' }),
      });
      if (result.ok) {
        return result.json();
      }
      console.error(
        'failed to identify',
        result.status,
        result.statusText,
        await result.text()
      );
    } catch (error) {
      console.error('failed to identify', error);
    }
  }

  private authHeader() {
    return {
      'Content-Type': 'application/json',
      Authorization: `Bearer ${this.options.credentials.apiKey}`,
    };
  }

  private url(path: string) {
    const url =
      this.options.baseUrl ??
      process.env['WORKSHEETS_HOST_URL'] ??
      DEFAULT_HOST_URL;
    return url + path;
  }
}
