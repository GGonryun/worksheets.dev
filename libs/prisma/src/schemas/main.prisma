generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserType {
  USER
  MODERATOR
  ADMIN
}

model User {
  id                      String                   @id @default(cuid())
  name                    String?
  email                   String                   @unique
  emailVerified           DateTime?
  image                   String?
  referredByUserId        String?
  username                String                   @default(cuid())
  bio                     String?
  isPublisher             Boolean                  @default(false)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  lastSeen                DateTime?                @default(now())
  type                    UserType                 @default(USER)
  accounts                Account[]
  sessions                Session[]
  rewards                 Rewards?
  submissions             GameSubmission[]
  // raffles
  participation           RaffleParticipation[]
  winnings                RaffleWinner[]
  // friendships
  friends                 Friendship[]             @relation(name: "Friends")
  followers               Friendship[]             @relation(name: "Followers")
  // socials
  referralCode            ReferralCode?
  referredBy              User?                    @relation(name: "Referred", fields: [referredByUserId], references: [id])
  referred                User[]                   @relation(name: "Referred")
  // notifications
  notifications           Notification[]
  notificationPreferences NotificationPreferences?
  // vip membership
  vip                     VipMembershipWaitlist?
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Friendship {
  id         String    @id @default(cuid())
  userId     String
  friendId   String
  isFavorite Boolean   @default(false)
  // TODO: there's a glitch that theoretically makes it possible to send a gift to a friend, delete the friendship, and then recreate the friendship
  // which allows you to send multiple gifts to the same person.
  giftSentAt DateTime?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  user       User      @relation(name: "Friends", fields: [userId], references: [id], onDelete: Cascade)
  friend     User      @relation(name: "Followers", fields: [friendId], references: [id], onDelete: Cascade)
}

// TODO: use a direct gift model instead of a friendship with a giftSentAt field.
// model Gift {
//   id           String   @id @default(cuid())
//   senderId     String
//   recipientId  String
//   sentAt       DateTime @default(now())
//   claimedAt    DateTime?
// }

model Rewards {
  id                      String    @id @default(cuid())
  userId                  String    @unique
  totalTokens             Int
  availableGamePlayTokens Int
  availableReferralTokens Int
  giftBoxes               Int
  sharableGiftBoxes       Int
  claimedDailyReward      DateTime?
  updatedAt               DateTime  @updatedAt
  user                    User      @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NotificationPreferences {
  id        String   @id @default(cuid())
  userId    String   @unique
  email     Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model NewsletterSubscription {
  id         String   @id @default(cuid())
  email      String   @unique
  subscribed Boolean  @default(true)
  confirmed  Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model ReferralCode {
  id     String @id @default(cuid())
  code   String @unique
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReportReason {
  BROKEN
  DEFAMATORY
  HARMFUL
  LEGAL
  FRAUD
  INAPPROPRIATE
  OTHER
}

model GameReport {
  id        String       @id @default(cuid())
  gameId    String
  game      Game         @relation(fields: [gameId], references: [id])
  reason    ReportReason @default(OTHER)
  text      String       @db.VarChar(255)
  createdAt DateTime     @default(now())
}

enum GameDevices {
  MOBILE
  COMPUTER
}

enum GameSubmissionStatus {
  DRAFT
  REJECTED
  PENDING
  ACCEPTED
  DELETED
}

enum ProjectType {
  HTML
  EXTERNAL
}

enum ViewportType {
  FIXED
  RESPONSIVE
}

enum DeviceOrientations {
  PORTRAIT
  LANDSCAPE
}

model Viewport {
  id           String               @id @default(cuid())
  type         ViewportType         @default(RESPONSIVE)
  width        Int?
  height       Int?
  devices      GameDevices[]        @default([COMPUTER, MOBILE])
  orientations DeviceOrientations[] @default([PORTRAIT, LANDSCAPE])
  games        Game[]
}

model GameFile {
  id   String      @id @default(cuid())
  type ProjectType @default(HTML)
  url  String      @db.VarChar(511)
  game Game?
}

model CategoriesOnGame {
  gameId     String
  game       Game         @relation(fields: [gameId], references: [id])
  categoryId String
  category   GameCategory @relation(fields: [categoryId], references: [id])

  @@id([gameId, categoryId])
}

model GameCategory {
  id                 String             @id @default(cuid())
  name               String             @unique
  description        String             @db.VarChar(4095)
  iconUrl            String             @db.VarChar(255)
  relatedCategoryIds String[]           @db.VarChar(63)
  games              CategoriesOnGame[]
  // analytics
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
}

model Developer {
  id          String @id @default(cuid())
  name        String @unique
  description String @db.VarChar(4095)
  logoUrl     String @db.VarChar(255)
  links       String
  games       Game[]
}

enum GameStatus {
  PUBLISHED
  UNPUBLISHED
  DELETED
}

model Game {
  id          String             @id @default(cuid())
  status      GameStatus         @default(UNPUBLISHED)
  // Details
  title       String             @db.VarChar(127)
  description String             @db.VarChar(4095)
  plays       Int                @default(0)
  likes       Int                @default(0)
  dislikes    Int                @default(0)
  // Search
  categories  CategoriesOnGame[]
  // Audit
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  // Assets
  thumbnail   String             @db.Text // URL
  cover       String             @db.Text // URL
  fileId      String             @unique
  file        GameFile           @relation(fields: [fileId], references: [id])
  // Display
  viewportId  String
  viewport    Viewport           @relation(fields: [viewportId], references: [id])
  // Developer
  developerId String
  developer   Developer          @relation(fields: [developerId], references: [id])
  // Reports
  reports     GameReport[]
}

model StoredFile {
  id           String          @id @default(cuid())
  submissionId String
  userId       String
  name         String          @db.VarChar(255)
  path         String          @db.VarChar(511)
  size         Int             @default(0) // stored as MB
  type         String          @db.VarChar(63)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  gameFileFor  GameSubmission? @relation(name: "gameFile")
  thumbnailFor GameSubmission? @relation(name: "thumbnailFile")
  coverFor     GameSubmission? @relation(name: "coverFile")
}

model GameSubmission {
  id                 String                   @id @default(cuid())
  // form data
  slug               String?                  @db.VarChar(63)
  title              String?                  @db.VarChar(63)
  headline           String?                  @db.VarChar(255)
  projectType        ProjectType?
  externalWebsiteUrl String?                  @db.VarChar(255)
  viewport           ViewportType?            @default(RESPONSIVE)
  viewportWidth      Int?
  viewportHeight     Int?
  devices            GameDevices[]
  orientations       DeviceOrientations[]
  description        String?                  @db.VarChar(1023)
  instructions       String?                  @db.VarChar(1023)
  categories         String[]                 @default([]) @db.VarChar(63)
  // a JSON object with the game's supported markets
  // we use a string instead of JSON because our zod parser doesn't support JSON properly.
  // known-issue: https://github.com/microsoft/TypeScript/issues/34933
  markets            String?
  // assets
  // cascade delete the files when the submission is deleted.
  gameFileId         String?                  @unique @db.VarChar(63)
  gameFile           StoredFile?              @relation(name: "gameFile", fields: [gameFileId], references: [id])
  thumbnailFileId    String?                  @unique @db.VarChar(63)
  thumbnailFile      StoredFile?              @relation(name: "thumbnailFile", fields: [thumbnailFileId], references: [id])
  coverFileId        String?                  @unique @db.VarChar(63)
  coverFile          StoredFile?              @relation(name: "coverFile", fields: [coverFileId], references: [id])
  trailerUrl         String?                  @db.VarChar(63)
  // The game status is updated when the game is submitted.
  // approved submissions are deleted after the game is published.
  status             GameSubmissionStatus     @default(DRAFT)
  reviews            GameSubmissionFeedback[]
  // the profile that submitted the game
  userId             String
  user               User                     @relation(fields: [userId], references: [id])
  // auditing and analytics
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
}

// Feedback for a game submission, written by an admin or moderator.
// Feedback should be created if a game has some issues that need to be fixed before it can be published.
// A game submission can have multiple feedback reports.
model GameSubmissionFeedback {
  id           String         @id @default(cuid())
  submissionId String
  text         String         @db.VarChar(511)
  createdAt    DateTime       @default(now())
  game         GameSubmission @relation(fields: [submissionId], references: [id])
}

model Sponsor {
  id     String   @id @default(cuid())
  name   String   @db.VarChar(127)
  url    String   @db.VarChar(255)
  raffle Raffle[]
}

enum PrizeType {
  STEAM_KEY
  GIFT_CARD
}

model Prize {
  id            Int              @id @default(autoincrement())
  name          String           @db.VarChar(127)
  headline      String           @db.VarChar(255)
  description   String           @db.VarChar(2047)
  monetaryValue Int
  sourceUrl     String           @db.VarChar(255)
  imageUrl      String           @db.VarChar(255)
  // the type of activation code it is. (e.g. steam key or gift card key)
  type          PrizeType
  // external
  raffles       Raffle[]
  // analytics
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  winners       RaffleWinner[]
  codes         ActivationCode[]
}

enum RaffleStatus {
  DRAFT // the raffle is being created
  ACTIVE // the raffle is currently running
  COMPLETE // the raffle has winners and the prizes have been assigned
  CANCELLED // the raffle was cancelled early
}

model Raffle {
  id           Int                   @id @default(autoincrement())
  status       RaffleStatus
  expiresAt    DateTime
  costPerEntry Int
  numWinners   Int
  prizeId      Int
  prize        Prize                 @relation(fields: [prizeId], references: [id])
  // sponsorship
  sponsorId    String                @db.VarChar(127)
  sponsor      Sponsor               @relation(fields: [sponsorId], references: [id])
  // analytics
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  // relationships
  participants RaffleParticipation[]
  winners      RaffleWinner[]
  codes        ActivationCode[]
}

model RaffleParticipation {
  id         Int           @id @default(autoincrement())
  numTickets Int
  // the user who bought the ticket
  userId     String
  user       User          @relation(fields: [userId], references: [id])
  // raffle the ticket is for
  raffleId   Int
  raffle     Raffle        @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  // analytics
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  winner     RaffleWinner?

  @@unique([userId, raffleId])
}

model ActivationCode {
  id        String        @id @default(cuid())
  // the redemption/secret code for the prize.
  content   String        @unique
  // the prize the code is for
  prizeId   Int
  prize     Prize         @relation(fields: [prizeId], references: [id])
  // the raffle the code is reserved by
  raffleId  Int?
  raffle    Raffle?       @relation(fields: [raffleId], references: [id])
  // the winner of the code
  winner    RaffleWinner?
  // analytics
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model RaffleWinner {
  id              String              @id @default(cuid())
  raffleId        Int
  raffle          Raffle              @relation(fields: [raffleId], references: [id])
  prizeId         Int
  prize           Prize               @relation(fields: [prizeId], references: [id])
  participationId Int                 @unique // a ticket can only win once
  participation   RaffleParticipation @relation(fields: [participationId], references: [id])
  userId          String
  user            User                @relation(fields: [userId], references: [id])
  codeId          String              @unique // a code can only be won once
  code            ActivationCode      @relation(fields: [codeId], references: [id])
  createdAt       DateTime            @default(now())
  // when the user claims the prize, the claim alert is deleted.
  claimedAt       DateTime?
  alert           ClaimAlert?
}

// when a raffle expires, the winners are chosen, and activation codes are assigned to the winning tickets and users. 
// a claim alert is created for each user who won a prize. we'll send a notification to the user to let them know they won.
// when a user claims the prize, the claim alert is deleted.
model ClaimAlert {
  id         String       @id @default(cuid())
  createdAt  DateTime     @default(now())
  lastSentAt DateTime?
  sentCount  Int          @default(0)
  // relationships
  winnerId   String       @unique
  winner     RaffleWinner @relation(fields: [winnerId], references: [id])
}

enum NotificationType {
  SYSTEM
  FRIEND
  RAFFLE
  REWARD
  GAME
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  text      String           @db.VarChar(511)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VipMembershipWaitlist {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
