generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model GamePlay {
  id            String        @id @default(cuid())
  gameId        String
  total         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  // game          Game          @relation(fields: [gameId], references: [id])
}

model GameVote {
  id            String        @id @default(cuid())
  gameId        String
  createdAt     DateTime      @default(now())
  up            Int           @default(0)
  down          Int           @default(0)
  // game          Game          @relation(fields: [gameId], references: [id])
}

model GameVoteSubmission {
  id            String        @id @default(cuid())
  gameId        String
  createdAt     DateTime      @default(now())
  ip            String
  vote          Int           @default(0)
  // game          Game          @relation(fields: [gameId], references: [id])
  // user          User          @relation(fields: [userId], references: [id])
}


enum GameDevices {
  MOBILE
  WEB
}

enum GameStatus {
  DRAFT
  ERROR
  PUBLISHED
  ARCHIVED
}

model User {
  id                String    @id @default(cuid())
  name              String?
  username          String?
  email             String?   @unique
  emailVerified     DateTime?
  image             String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  submissions       Game[]
  accounts          Account[]
  sessions          Session[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Email {
  id            String    @default(cuid()) @id
  address       String    @unique
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

enum ReportReason {
  BROKEN
  DEFAMATORY
  HARMFUL
  LEGAL
  FRAUD
  INAPPROPRIATE
  OTHER
}

model GameReport {
  id            String        @id @default(cuid())
  gameId        String
  reason        ReportReason  @default(OTHER)
  text          String        @db.VarChar(255)
  createdAt     DateTime      @default(now())
}

enum ProjectType {
  HTML
  PAGE  
}

enum ViewportType {
  FIXED
  RESPONSIVE
}

enum GameCategory {
  ACTION
  ADVENTURE
  ARCADE
  BOARD
  CARD
  EDUCATIONAL
  FIGHTING
  IDLE
  NOVEL
  PLATFORMER
  PUZZLE
  RACING
  RPG
  RHYTHM
  SHOOTER
  SIMULATION
  SPORTS
  STRATEGY
  SURVIVAL
  OTHER
  TRIVIA
  WORD
}

model StoredFile {
  id           String           @id @default(cuid())
  userId       String           
  type         String           @db.VarChar(63)
  name         String           @db.VarChar(127)
  path         String           @db.VarChar(255)
  url          String           @db.VarChar(511)
  size         Int              @default(0)
  // Stored files that don't belong to a game submission are deleted after a while.
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  // The gameId is assigned after the game is submitted.
  gameId       String?          @unique
  game         Game?            @relation(fields: [gameId], references: [id])
}


enum DeviceOrientations {
  PORTRAIT
  LANDSCAPE
}


model Game {
  id                  String                @id @default(cuid())
  slug                String                @db.VarChar(63) @unique
  title               String                @db.VarChar(63)
  tagline             String                @db.VarChar(255)
  projectType         ProjectType           @default(HTML)
  externalWebsiteUrl  String?               @db.VarChar(255)
  viewport            ViewportType          @default(RESPONSIVE)
  viewportWidth       Int? 
  viewportHeight      Int?
  devices             GameDevices[]         @default([WEB])
  orientations        DeviceOrientations[]  @default([PORTRAIT])
  description         String?               @db.VarChar(1023)
  instructions        String?               @db.VarChar(1023)
  category            GameCategory          @default(OTHER)
  tags                String[]              @db.VarChar(63)
  purchaseOptions     Json
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  // When a user submits a game, we update all stored files and assign the gameId.
  gameFileId          String                @db.VarChar(63) @unique
  thumbnailId         String                @db.VarChar(63) @unique
  coverId             String                @db.VarChar(63) @unique
  screenshotIds       String[]              @db.VarChar(63) @default([])
  status              GameStatus            @default(DRAFT)
  files               StoredFile[]      
  // the user that submitted the game
  ownerId             String 
  owner               User                  @relation(fields: [ownerId], references: [id])    
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "../zod" // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}