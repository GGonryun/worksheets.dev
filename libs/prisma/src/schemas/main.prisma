generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserType {
  USER
  MODERATOR
  ADMIN
}

model User {
  id               String                @id @default(cuid())
  name             String?
  email            String                @unique
  emailVerified    DateTime?
  image            String?
  referredByUserId String?
  username         String                @default(cuid())
  bio              String?
  isPublisher      Boolean               @default(false)
  createdAt        DateTime              @default(now())
  updatedAt        DateTime              @updatedAt
  lastSeen         DateTime?             @default(now())
  multiplier       Float                 @default(1)
  experience       Int                   @default(0)
  type             UserType              @default(USER)
  accounts         Account[]
  sessions         Session[]
  // raffles
  participation    RaffleParticipation[]
  // socials
  referralCode     ReferralCode?
  referredBy       User?                 @relation(name: "Referred", fields: [referredByUserId], references: [id])
  referred         User[]                @relation(name: "Referred")
  tasks            TaskProgress[]
  // codes
  activationCode   ActivationCode[]
  // reports
  banned           Boolean               @default(false)
  reportsAgainst   UserReport[]          @relation(name: "Against")
  reportsSent      UserReport[]          @relation(name: "Sender")
  plays            GamePlayHistory[]
  prizes           Prize[]
  referredAction   ReferralAction[]      @relation(name: "ReferredAction")
  referrerAction   ReferralAction[]      @relation(name: "ReferrerAction")
  gameSessions     GameSession[]
  gameStorage      GameStorage[]
  gameScores       GameScore[]
  achievement      PlayerAchievement[]
  teams            TeamMembership[]
  games            Game[]
  files            GameFile[]
}

model Team {
  id          String           @id @default(cuid())
  name        String           @db.VarChar(64)
  slug        String           @unique
  description String           @db.VarChar(4095)
  logo        String           @db.Text // URL
  links       Json
  members     TeamMembership[]
  games       Game[]
}

model TeamMembership {
  teamId    String
  team      Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([teamId, userId])
}

enum FileUploadStatus {
  PENDING
  DONE
  ERROR
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserReport {
  id        String   @id @default(cuid())
  senderId  String?
  sender    User?    @relation(name: "Sender", fields: [senderId], references: [id], onDelete: Cascade)
  againstId String
  against   User     @relation(name: "Against", fields: [againstId], references: [id], onDelete: Cascade)
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

model ReferralCode {
  id     String @id @default(cuid())
  code   String @unique
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReportReason {
  BROKEN
  DEFAMATORY
  HARMFUL
  LEGAL
  FRAUD
  INAPPROPRIATE
  OTHER
}

model GameReport {
  id        String       @id @default(cuid())
  gameId    String
  game      Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  reason    ReportReason @default(OTHER)
  text      String       @db.VarChar(255)
  createdAt DateTime     @default(now())
}

enum GameDevices {
  MOBILE
  COMPUTER
}

enum ProjectType {
  HTML
  EXTERNAL
}

enum ViewportType {
  RESPONSIVE
}

enum DeviceOrientations {
  PORTRAIT
  LANDSCAPE
}

model Viewport {
  id           String               @id @default(cuid())
  type         ViewportType         @default(RESPONSIVE)
  devices      GameDevices[]        @default([COMPUTER, MOBILE])
  orientations DeviceOrientations[] @default([PORTRAIT, LANDSCAPE])
  games        Game[]
}

model GameFile {
  id         String      @id @default(cuid())
  version    String      @default("1.0.0")
  type       ProjectType @default(HTML)
  url        String      @db.VarChar(511)
  // TODO: remove optionality after migration.
  metadata   Json?
  notes      String      @default("") @db.Text
  isCurrent  Boolean     @default(false)
  // TODO: after we migrate the existing games, we can remove the optional part.
  gameId     String?
  game       Game?       @relation(fields: [gameId], references: [id], onDelete: Cascade)
  uploaderId String?
  uploader   User?       @relation(fields: [uploaderId], references: [id], onDelete: Cascade)
  // analytics
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @default(now()) @updatedAt

  @@unique([gameId, version])
}

model CategoriesOnGame {
  gameId     String
  game       Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  categoryId String
  category   GameCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([gameId, categoryId])
}

model GameCategory {
  id                 String             @id @default(cuid())
  version            Int                @default(0)
  name               String             @unique
  description        String             @db.VarChar(4095)
  iconUrl            String             @db.VarChar(255)
  relatedCategoryIds String[]           @db.VarChar(63)
  games              CategoriesOnGame[]
  // analytics
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
}

enum GameStatus {
  DRAFT
  PENDING
  APPROVED
  REJECTED
  CHANGES_REQUESTED
  UNPUBLISHED // TODO: remove this after migration.
}

enum GameVisibility {
  PRIVATE
  UNLISTED
  PUBLIC
}

model Game {
  id           String              @id @default(cuid())
  version      Int                 @default(0)
  title        String              @db.VarChar(127)
  slug         String              @default("") // TODO: remove the default value after migration.
  description  String              @db.VarChar(4095)
  categories   CategoriesOnGame[]
  cover        String              @db.Text // URL
  thumbnail    String              @db.Text // URL
  trailer      String?             @db.Text // URL
  aiDisclosure Boolean             @default(false)
  viewportId   String
  viewport     Viewport            @relation(fields: [viewportId], references: [id])
  // Ownership
  status       GameStatus          @default(DRAFT)
  visibility   GameVisibility      @default(PRIVATE)
  // TODO: remove optionality after migration.
  ownerId      String?
  owner        User?               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  // TODO: remove optionality after migration.
  teamId       String?
  team         Team?               @relation(fields: [teamId], references: [id])
  fileId       String? // TODO: remove this after the migration.
  // Game File -- Must have at least one active version saved to the file.
  files        GameFile[]
  // SDK Enabled
  leaderboard  Boolean             @default(false)
  cloudStorage Boolean             @default(false)
  // Analytics & Actions
  plays        Int                 @default(0)
  duration     Int                 @default(0)
  likes        Int                 @default(0)
  dislikes     Int                 @default(0)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  publishAt    DateTime            @default(now())
  reports      GameReport[]
  history      GamePlayHistory[]
  gameSessions GameSession[]
  gameStorage  GameStorage[]
  scores       GameScore[]
  achievements GameAchievement[]
  analytics    GamePlayAnalytics[]
  tasks        Task[]

  @@unique([slug, teamId])
}

model GamePlayHistory {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  plays     Int      @default(1)

  @@unique([gameId, userId])
}

model GamePlayAnalytics {
  id       String   @id @default(cuid())
  date     DateTime @default(now()) @db.Date
  gameId   String
  game     Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  plays    Int      @default(0)
  duration Int      @default(0)

  @@unique([date, gameId])
}

model Sponsor {
  id      String   @id @default(cuid())
  version Int      @default(0)
  name    String   @db.VarChar(127)
  url     String   @db.VarChar(255)
  logo    String   @default("") @db.VarChar(255)
  raffle  Raffle[]
}

enum RaffleStatus {
  PENDING // the raffle is being created
  ACTIVE // the raffle is currently running
  COMPLETE // the raffle has winners and the prizes have been assigned
  CANCELLED // the raffle was cancelled early
}

model Raffle {
  id              Int                   @id @default(autoincrement())
  status          RaffleStatus
  expiresAt       DateTime
  // prize
  prizeId         Int                   @unique
  prize           Prize                 @relation(fields: [prizeId], references: [id])
  // sponsorship
  sponsorId       String                @db.VarChar(127)
  sponsor         Sponsor               @relation(fields: [sponsorId], references: [id])
  // analytics
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  publishAt       DateTime              @default(now())
  // relationships
  participants    RaffleParticipation[]
  actions         RaffleAction[]
  referralActions ReferralAction[]
}

enum PrizeType {
  RANDOM_STEAM_KEY
  STEAM_KEY
}

model Prize {
  id          Int             @id @default(autoincrement())
  raffle      Raffle?
  type        PrizeType
  name        String
  headline    String
  description String
  imageUrl    String
  // if type is STEAM_KEY, this is the associated activation code.
  codeId      String?         @unique
  code        ActivationCode? @relation(fields: [codeId], references: [id])
  userId      String?
  user        User?           @relation(fields: [userId], references: [id])
}

model RaffleParticipation {
  id         Int      @id @default(autoincrement())
  numEntries Int
  // the user who bought the ticket
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // raffle the ticket is for
  raffleId   Int
  raffle     Raffle   @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  // analytics
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  winner     Boolean  @default(false)

  @@unique([userId, raffleId])
}

enum ActivationCodeType {
  STEAM
}

model Expiration {
  id               String         @id @default(cuid())
  expiresAt        DateTime
  lastSentAt       DateTime?
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  activationCodeId String         @unique
  activationCode   ActivationCode @relation(fields: [activationCodeId], references: [id])
}

model ActivationCode {
  id         String             @id @default(cuid())
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  accessedAt DateTime?
  expiration Expiration?
  type       ActivationCodeType @default(STEAM)
  name       String
  imageUrl   String             @default("")
  sourceUrl  String
  // the redemption/secret code for the prize.
  content    String
  // ** Relationships **
  userId     String?
  user       User?              @relation(fields: [userId], references: [id])
  prize      Prize?
}

enum TaskStatus {
  PENDING
  ACTIVE
  COMPLETED
}

enum TaskType {
  PLAY_GAME
  PLAY_MINUTES
  VISIT_WEBSITE
  VISIT_FACEBOOK
  VISIT_INSTAGRAM
  VISIT_TIKTOK
  VISIT_YOUTUBE
  FOLLOW_TWITTER
  REPOST_TWITTER
  BASIC_ACTION
  WATCH_AD
  FOLLOW_TWITCH
  WISHLIST_STEAM_GAME
  JOIN_DISCORD_GUILD
  SUBMIT_LEADERBOARD_SCORE
  SUBSCRIBE_YOUTUBE
  CAPTCHA
  FORM
  POLL
  SECRET
  // when someone you referred completes a task, you get a reward.
  REFERRAL_TASK
  // TODO: add bonus action. (behaves like basic action, but has a different theme and icon)
}

enum TaskCategory {
  GAMEPLAY
  SOCIAL
  TASK
  INPUT
}

enum TaskFrequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  INFINITE
}

model Task {
  id                  String         @id @default(cuid())
  // audit
  version             Int            @default(0)
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  // fields
  name                String
  description         String
  type                TaskType
  category            TaskCategory
  frequency           TaskFrequency
  // extra data payloads go here.
  data                Json
  // Describes the number of times a user needs to perform the task to receive the reward.
  requiredRepetitions Int
  // Denotes the maximum number of times the task can be performed
  maxRepetitions      Int
  // association to a game
  gameId              String?
  game                Game?          @relation(fields: [gameId], references: [id], onDelete: Cascade)
  // TODO: its a bit strange that taskProgress has no association to a task, 
  // it indirectly associates through an action.
  actions             RaffleAction[]
}

model TaskProgress {
  id          Int           @id @default(autoincrement())
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  status      TaskStatus
  // the number of times the user has performed the task. 
  // a reward is given when the task's interval is reached.
  repetitions Int
  // store the data for the task progress here.
  state       Json?
  // relationships
  userId      String
  user        User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  actionId    String?
  action      RaffleAction? @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@unique([userId, actionId])
}

model ReferralAction {
  id         Int    @id @default(autoincrement())
  raffleId   Int
  raffle     Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  referredId String
  referrer   User   @relation(name: "ReferrerAction", fields: [referredId], references: [id], onDelete: Cascade)
  referrerId String
  referred   User   @relation(name: "ReferredAction", fields: [referrerId], references: [id], onDelete: Cascade)

  // each referred user can only be referred once per raffle.
  @@unique([raffleId, referredId])
}

model RaffleAction {
  id          String         @id @default(cuid())
  order       Int
  name        String?
  description String?
  required    Boolean        @default(false)
  reward      Int // the number of entries the user gets for completing the action.
  // relationships
  taskId      String
  task        Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  raffleId    Int
  raffle      Raffle         @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  progress    TaskProgress[]
}

model GameSession {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameStorage {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([gameId, userId])
}

model GameScore {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  score     Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model GameAchievement {
  id          String              @id
  version     Int                 @default(0)
  gameId      String
  game        Game                @relation(fields: [gameId], references: [id], onDelete: Cascade)
  name        String
  description String
  iconUrl     String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  secret      Boolean             @default(false)
  players     PlayerAchievement[]

  @@unique([gameId, id])
}

model PlayerAchievement {
  id            String          @id @default(cuid())
  achievementId String
  achievement   GameAchievement @relation(fields: [achievementId], references: [id], onDelete: Cascade)
  userId        String
  user          User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime        @default(now())

  @@unique([achievementId, userId])
}
