generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model GamePlay {
  id            String        @id @default(cuid())
  gameId        String
  userId        String
  total         Int
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  game          Game          @relation(fields: [gameId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model GameVote {
  id            String        @id @default(cuid())
  gameId        String
  userId        String
  createdAt     DateTime      @default(now())
  liked         Boolean       
  game          Game          @relation(fields: [gameId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
}

model GameComment {
  id            String        @id @default(cuid())
  parentId      String?     
  gameId        String
  userId        String
  text          String        @db.VarChar(255)
  score         Int           @default(0)
  hidden        Boolean       @default(false)
  createdAt     DateTime      @default(now())
  game          Game          @relation(fields: [gameId], references: [id])
  user          User          @relation(fields: [userId], references: [id])
  parent        GameComment?  @relation("GameCommentToGameComment", fields: [parentId], references: [id])
  replies       GameComment[] @relation("GameCommentToGameComment")
}


model Game {
  id            String        @id @default(cuid())
  key           String        @db.VarChar(63)
  status        GameStatus    @default(DRAFT)
  name          String?       @db.VarChar(127)
  headline      String?       @db.VarChar(256)
  description   String?       @db.VarChar(2047)
  banner        String?       @db.Text
  logo          String?       @db.Text
  video         String?       @db.Text
  screenshots   String[]      @db.Text
  file          String?      @db.Text
  devices       GameDevices[] @default([WEB])
  tags          String[]      @db.VarChar(63)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  plays         GamePlay[]
  votes         GameVote[]
  comments      GameComment[]
  teamId        String
}

enum GameDevices {
  MOBILE
  WEB
}

enum GameStatus {
  DRAFT
  RESTRICTED
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  name          String?
  username      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  plays         GamePlay[]
  votes         GameVote[]
  accounts      Account[]
  sessions      Session[]
  comments      GameComment[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  refresh_token_expires_in Int?
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret       String?
  oauth_token              String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Email {
  id            String    @default(cuid()) @id
  address       String    @unique
  verified      Boolean   @default(false)
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
}

generator zod {
  provider                 = "zod-prisma"
  output                   = "../zod" // (default) the directory where generated zod schemas will be saved

  relationModel            = true // (default) Create and export both plain and related models.
  // relationModel         = "default" // Do not export model without relations.
  // relationModel         = false // Do not generate related model

  modelCase                = "PascalCase" // (default) Output models using pascal case (ex. UserModel, PostModel)
  // modelCase             = "camelCase" // Output models using camel case (ex. userModel, postModel)

  modelSuffix              = "Model" // (default) Suffix to apply to your prisma models when naming Zod schemas

  // useDecimalJs          = false // (default) represent the prisma Decimal type using as a JS number
  useDecimalJs             = true // represent the prisma Decimal type using Decimal.js (as Prisma does)

  // https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
  prismaJsonNullability    = true // (default) uses prisma's scheme for JSON field nullability
  // prismaJsonNullability = false // allows null assignment to optional JSON fields
}