generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum UserType {
  USER
  MODERATOR
  ADMIN
}

model User {
  id               String                 @id @default(cuid())
  name             String?
  email            String                 @unique
  emailVerified    DateTime?
  image            String?
  referredByUserId String?
  username         String                 @default(cuid())
  bio              String?
  isPublisher      Boolean                @default(false)
  createdAt        DateTime               @default(now())
  updatedAt        DateTime               @updatedAt
  lastSeen         DateTime?              @default(now())
  type             UserType               @default(USER)
  accounts         Account[]
  sessions         Session[]
  submissions      GameSubmission[]
  // inventory & loot
  inventory        Inventory[]
  // raffles
  participation    RaffleParticipation[]
  // friendships
  friends          Friendship[]           @relation(name: "Friends")
  followers        Friendship[]           @relation(name: "Followers")
  // socials
  referralCode     ReferralCode?
  referredBy       User?                  @relation(name: "Referred", fields: [referredByUserId], references: [id])
  referred         User[]                 @relation(name: "Referred")
  // notifications
  notifications    Notification[]
  // vip membership
  vip              VipMembershipWaitlist?
  tasks            TaskProgress[]
  // codes
  activationCode   ActivationCode[]
  redemptionCodes  RedemptionCode[]
  // battles
  battles          BattleParticipation[]
  // reports
  banned           Boolean                @default(false)
  reportsAgainst   UserReport[]           @relation(name: "Against")
  reportsSent      UserReport[]           @relation(name: "Sender")
  plays            GamePlayHistory[]
  // integrations
  integrations     Integration[]
  referredAction   ReferralAction[]       @relation(name: "ReferredAction")
  referrerAction   ReferralAction[]       @relation(name: "ReferrerAction")
}

model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? @db.Text
  refresh_token_expires_in Int?
  access_token             String? @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? @db.Text
  session_state            String?
  oauth_token_secret       String?
  oauth_token              String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserReport {
  id        String   @id @default(cuid())
  senderId  String?
  sender    User?    @relation(name: "Sender", fields: [senderId], references: [id], onDelete: Cascade)
  againstId String
  against   User     @relation(name: "Against", fields: [againstId], references: [id], onDelete: Cascade)
  text      String   @db.VarChar(255)
  createdAt DateTime @default(now())
}

model Friendship {
  id         String   @id @default(cuid())
  userId     String
  friendId   String
  isFavorite Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User     @relation(name: "Friends", fields: [userId], references: [id], onDelete: Cascade)
  friend     User     @relation(name: "Followers", fields: [friendId], references: [id], onDelete: Cascade)
}

model Inventory {
  id         String                @id @default(cuid())
  itemId     String
  item       Item                  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quantity   Int
  createdAt  DateTime              @default(now())
  updatedAt  DateTime              @updatedAt
  userId     String
  user       User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiration InventoryExpiration[]
  capsule    InventoryCapsule?

  @@unique([itemId, userId])
}

// how do we stack loot crates?
// we should only allow useres to open one loot crate at a time.
// after the loot crate is opened, it'll have 3 usages.
// if you watch an add you can get extra usages.
// after you use all the usages, you can choose to open
// another loot crate.

model InventoryCapsule {
  id          String          @id @default(cuid())
  inventoryId String          @unique
  inventory   Inventory       @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  unlocks     Int
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  options     CapsuleOption[]
}

model CapsuleOption {
  id        String           @id @default(cuid())
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  capsuleId String
  capsule   InventoryCapsule @relation(fields: [capsuleId], references: [id], onDelete: Cascade)
  itemId    String
  item      Item             @relation(fields: [itemId], references: [id], onDelete: Cascade)
  position  Int
  unlocked  Boolean          @default(false)
  quantity  Int

  @@unique([capsuleId, position])
}

model InventoryExpiration {
  id          String    @id @default(cuid())
  inventoryId String
  inventory   Inventory @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  lastSentAt  DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum ItemType {
  CURRENCY
  STEAM_KEY
  CONSUMABLE
  SHARABLE
  COMBAT
  ETCETERA
  CAPSULE
  PRIZE_WHEEL
}

enum ItemRarity {
  COMMON
  UNCOMMON
  RARE
  LEGENDARY
  MYTHIC
  // items that have a monetary value
  PREMIUM
}

model Item {
  id              String           @id @default(cuid())
  version         Int              @default(0)
  code            String
  type            ItemType
  name            String
  description     String
  // TODO: remove default values for sell, buy, and rarity. Make these required after migration.
  // how much this item sells for in the marketplace
  sell            Int              @default(1)
  // how much this item costs to purchase in the marketplace
  // an item without a buy price can't be purchased.
  buy             Int              @default(0)
  rarity          ItemRarity       @default(COMMON)
  imageUrl        String
  expiration      Int?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  inventory       Inventory[]
  raffles         Raffle[]
  activationCodes ActivationCode[]
  redemptionCodes RedemptionCode[]
  loot            Loot[]
  capsuleOption   CapsuleOption[]
}

enum NewsletterTopic {
  Transactional
  NewRaffle
  NewGame
  NewAuction
  WeeklyNewsletter
  TipsAndTricks
}

model NewsletterSubscription {
  id        String            @id @default(cuid())
  email     String            @unique
  topics    NewsletterTopic[] @default([Transactional, NewRaffle, NewGame, NewAuction, WeeklyNewsletter, TipsAndTricks])
  confirmed Boolean           @default(false)
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
}

model ReferralCode {
  id     String @id @default(cuid())
  code   String @unique
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum ReportReason {
  BROKEN
  DEFAMATORY
  HARMFUL
  LEGAL
  FRAUD
  INAPPROPRIATE
  OTHER
}

model GameReport {
  id        String       @id @default(cuid())
  gameId    String
  game      Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  reason    ReportReason @default(OTHER)
  text      String       @db.VarChar(255)
  createdAt DateTime     @default(now())
}

enum GameDevices {
  MOBILE
  COMPUTER
}

enum GameSubmissionStatus {
  DRAFT
  REJECTED
  PENDING
  ACCEPTED
  DELETED
}

enum ProjectType {
  HTML
  EXTERNAL
}

enum ViewportType {
  FIXED
  RESPONSIVE
}

enum DeviceOrientations {
  PORTRAIT
  LANDSCAPE
}

model Viewport {
  id           String               @id @default(cuid())
  type         ViewportType         @default(RESPONSIVE)
  width        Int?
  height       Int?
  devices      GameDevices[]        @default([COMPUTER, MOBILE])
  orientations DeviceOrientations[] @default([PORTRAIT, LANDSCAPE])
  games        Game[]
}

model GameFile {
  id   String      @id @default(cuid())
  type ProjectType @default(HTML)
  url  String      @db.VarChar(511)
  game Game?
}

model CategoriesOnGame {
  gameId     String
  game       Game         @relation(fields: [gameId], references: [id], onDelete: Cascade)
  categoryId String
  category   GameCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([gameId, categoryId])
}

model GameCategory {
  id                 String             @id @default(cuid())
  version            Int                @default(0)
  name               String             @unique
  description        String             @db.VarChar(4095)
  iconUrl            String             @db.VarChar(255)
  relatedCategoryIds String[]           @db.VarChar(63)
  games              CategoriesOnGame[]
  // analytics
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @default(now()) @updatedAt
}

model Developer {
  id          String @id @default(cuid())
  version     Int    @default(0)
  name        String @unique
  description String @db.VarChar(4095)
  logoUrl     String @db.VarChar(255)
  links       String
  games       Game[]
}

enum GameStatus {
  PUBLISHED
  UNPUBLISHED
  DELETED
}

model Game {
  id          String             @id @default(cuid())
  version     Int                @default(0)
  status      GameStatus         @default(UNPUBLISHED)
  // Details
  title       String             @db.VarChar(127)
  description String             @db.VarChar(4095)
  plays       Int                @default(0)
  likes       Int                @default(0)
  dislikes    Int                @default(0)
  // Search
  categories  CategoriesOnGame[]
  // Audit
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
  publishAt   DateTime           @default(now())
  // Assets
  thumbnail   String             @db.Text // URL
  cover       String             @db.Text // URL
  trailer     String?            @db.Text // URL
  fileId      String             @unique
  file        GameFile           @relation(fields: [fileId], references: [id])
  // Display
  viewportId  String
  viewport    Viewport           @relation(fields: [viewportId], references: [id])
  // Developer
  developerId String
  developer   Developer          @relation(fields: [developerId], references: [id])
  // Reports
  reports     GameReport[]
  history     GamePlayHistory[]
  tasks       Task[]
}

model GamePlayHistory {
  id        String   @id @default(cuid())
  gameId    String
  game      Game     @relation(fields: [gameId], references: [id], onDelete: Cascade)
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model StoredFile {
  id           String          @id @default(cuid())
  submissionId String
  userId       String
  name         String          @db.VarChar(255)
  path         String          @db.VarChar(511)
  size         Int             @default(0) // stored as MB
  type         String          @db.VarChar(63)
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  gameFileFor  GameSubmission? @relation(name: "gameFile")
  thumbnailFor GameSubmission? @relation(name: "thumbnailFile")
  coverFor     GameSubmission? @relation(name: "coverFile")
}

model GameSubmission {
  id                 String                   @id @default(cuid())
  // form data
  slug               String?                  @db.VarChar(63)
  title              String?                  @db.VarChar(63)
  headline           String?                  @db.VarChar(255)
  projectType        ProjectType?
  externalWebsiteUrl String?                  @db.VarChar(255)
  viewport           ViewportType?            @default(RESPONSIVE)
  viewportWidth      Int?
  viewportHeight     Int?
  devices            GameDevices[]
  orientations       DeviceOrientations[]
  description        String?                  @db.VarChar(1023)
  instructions       String?                  @db.VarChar(1023)
  categories         String[]                 @default([])
  // a JSON object with the game's supported markets
  // we use a string instead of JSON because our zod parser doesn't support JSON properly.
  // known-issue: https://github.com/microsoft/TypeScript/issues/34933
  markets            String?
  // assets
  // cascade delete the files when the submission is deleted.
  gameFileId         String?                  @unique @db.VarChar(63)
  gameFile           StoredFile?              @relation(name: "gameFile", fields: [gameFileId], references: [id])
  thumbnailFileId    String?                  @unique @db.VarChar(63)
  thumbnailFile      StoredFile?              @relation(name: "thumbnailFile", fields: [thumbnailFileId], references: [id])
  coverFileId        String?                  @unique @db.VarChar(63)
  coverFile          StoredFile?              @relation(name: "coverFile", fields: [coverFileId], references: [id])
  trailerUrl         String?                  @db.VarChar(63)
  // The game status is updated when the game is submitted.
  // approved submissions are deleted after the game is published.
  status             GameSubmissionStatus     @default(DRAFT)
  reviews            GameSubmissionFeedback[]
  // the profile that submitted the game
  userId             String
  user               User                     @relation(fields: [userId], references: [id])
  // auditing and analytics
  createdAt          DateTime                 @default(now())
  updatedAt          DateTime                 @updatedAt
}

// Feedback for a game submission, written by an admin or moderator.
// Feedback should be created if a game has some issues that need to be fixed before it can be published.
// A game submission can have multiple feedback reports.
model GameSubmissionFeedback {
  id           String         @id @default(cuid())
  submissionId String
  text         String         @db.VarChar(511)
  createdAt    DateTime       @default(now())
  game         GameSubmission @relation(fields: [submissionId], references: [id])
}

model Sponsor {
  id      String   @id @default(cuid())
  version Int      @default(0)
  name    String   @db.VarChar(127)
  url     String   @db.VarChar(255)
  logo    String   @default("") @db.VarChar(255)
  raffle  Raffle[]
}

enum RaffleStatus {
  PENDING // the raffle is being created
  ACTIVE // the raffle is currently running
  COMPLETE // the raffle has winners and the prizes have been assigned
  CANCELLED // the raffle was cancelled early
}

model Raffle {
  id              Int                   @id
  version         Int                   @default(0)
  status          RaffleStatus
  expiresAt       DateTime
  numWinners      Int
  imageUrl        String?               @db.VarChar(255)
  premium         Boolean               @default(false)
  itemId          String
  item            Item                  @relation(fields: [itemId], references: [id])
  // max purchasable entries per user
  maxEntries      Int?
  // sponsorship
  sponsorId       String                @db.VarChar(127)
  sponsor         Sponsor               @relation(fields: [sponsorId], references: [id])
  // analytics
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  publishAt       DateTime              @default(now())
  // relationships
  participants    RaffleParticipation[]
  actions         RaffleAction[]
  referralActions ReferralAction[]
}

model RaffleParticipation {
  id         Int      @id @default(autoincrement())
  numEntries Int
  purchased  Int      @default(0)
  // the user who bought the ticket
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  // raffle the ticket is for
  raffleId   Int
  raffle     Raffle   @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  // analytics
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  winner     Boolean  @default(false)

  @@unique([userId, raffleId])
}

model ActivationCode {
  id         String    @id @default(cuid())
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  // the redemption/secret code for the prize.
  content    String
  accessedAt DateTime?
  // more data about the code
  sourceUrl  String
  // even though the item has a name, the code itself can have a different name.
  // for example the source item could be "Random Steam Key" and the name would be "Steam Key for Game X"
  name       String
  itemId     String
  item       Item      @relation(fields: [itemId], references: [id])
  userId     String?
  user       User?     @relation(fields: [userId], references: [id])
}

// these codes are used to redeem prizes on the site as opposed to activation codes which are used to redeem external prizes.
model RedemptionCode {
  id         String    @id @default(cuid())
  redeemedAt DateTime?
  quantity   Int       @default(1)

  // the item the code is for
  itemId String
  item   Item    @relation(fields: [itemId], references: [id])
  // an owner can be assigned to the code without using a raffle.
  // this is useful for assigning codes to users who win a prize in a different way.
  userId String?
  user   User?   @relation(fields: [userId], references: [id])
}

enum ScheduledEmailStatus {
  DRAFT // don't try to send draft messages.
  PENDING
  SENT
  SENDING
  FAILED
  CANCELLED
}

model ScheduledEmail {
  id        Int                  @id @default(autoincrement())
  createdAt DateTime             @default(now())
  updatedAt DateTime             @default(now())
  priority  Int
  sendAt    DateTime
  status    ScheduledEmailStatus @default(PENDING)
  to        String[]             @default([])
  cc        String[]             @default([])
  bcc       String[]             @default([])
  subject   String
  html      String
}

enum NotificationType {
  SYSTEM
  FRIEND
  RAFFLE
  QUEST
  INVENTORY
  REWARD
  GAME
  BATTLE
}

model Notification {
  id        String           @id @default(cuid())
  type      NotificationType
  text      String           @db.VarChar(511)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  userId    String
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VipMembershipWaitlist {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum TaskStatus {
  PENDING
  ACTIVE
  COMPLETED
}

enum TaskType {
  PLAY_GAME
  PLAY_MINUTES
  REFERRAL_PLAY_MINUTES
  FRIEND_PLAY_MINUTES
  ADD_FRIEND
  ADD_REFERRAL
  RAFFLE_PARTICIPATION
  BATTLE_PARTICIPATION
  VISIT_WEBSITE
  VISIT_FACEBOOK
  VISIT_INSTAGRAM
  VISIT_TIKTOK
  VISIT_YOUTUBE
  FOLLOW_TWITTER
  REPOST_TWITTER
  BASIC_ACTION
  WATCH_AD
  FOLLOW_TWITCH
  WISHLIST_STEAM_GAME
  JOIN_DISCORD_GUILD
  SUBSCRIBE_YOUTUBE
  CAPTCHA
  FORM
  POLL
  SECRET
  // when someone you referred completes a task, you get a reward.
  REFERRAL_TASK
  // TODO: add bonus action. (behaves like basic action, but has a different theme and icon)
}

enum TaskCategory {
  GAMEPLAY
  SOCIAL
  TASK
  INPUT
}

enum TaskFrequency {
  ONCE
  DAILY
  WEEKLY
  MONTHLY
  INFINITE
}

model Task {
  id                  String          @id @default(cuid())
  // audit
  version             Int             @default(0)
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt
  // fields
  name                String
  description         String
  type                TaskType
  category            TaskCategory
  frequency           TaskFrequency
  // extra data payloads go here.
  data                Json
  // Describes the number of times a user needs to perform the task to receive the reward.
  requiredRepetitions Int
  // Denotes the maximum number of times the task can be performed
  maxRepetitions      Int
  // association to a game
  gameId              String?
  game                Game?           @relation(fields: [gameId], references: [id], onDelete: Cascade)
  // TODO: its a bit strange that taskProgress has no association to a task, 
  // it indirectly associates through quest or action.
  quests              PlatformQuest[]
  actions             RaffleAction[]
}

model TaskProgress {
  id          Int            @id @default(autoincrement())
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  expiresAt   DateTime?
  status      TaskStatus
  // the number of times the user has performed the task. 
  // a reward is given when the task's interval is reached.
  repetitions Int
  // store the data for the task progress here.
  state       Json?
  // relationships
  userId      String
  user        User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  questId     String?
  quest       PlatformQuest? @relation(fields: [questId], references: [id], onDelete: Cascade)
  actionId    String?
  action      RaffleAction?  @relation(fields: [actionId], references: [id], onDelete: Cascade)

  @@unique([userId, questId])
  @@unique([userId, actionId])
}

model ReferralAction {
  id         Int    @id @default(autoincrement())
  raffleId   Int
  raffle     Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  referredId String
  referrer   User   @relation(name: "ReferrerAction", fields: [referredId], references: [id], onDelete: Cascade)
  referrerId String
  referred   User   @relation(name: "ReferredAction", fields: [referrerId], references: [id], onDelete: Cascade)

  // each referred user can only be referred once per raffle.
  @@unique([raffleId, referredId])
}

model PlatformQuest {
  id          String         @id @default(cuid())
  version     Int            @default(0)
  order       Int
  name        String?
  description String?
  loot        Loot[]
  // relationships
  taskId      String
  task        Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  progress    TaskProgress[]
}

model RaffleAction {
  id          String         @id @default(cuid())
  order       Int
  name        String?
  description String?
  required    Boolean        @default(false)
  reward      Int // the number of entries the user gets for completing the action.
  // relationships
  taskId      String
  task        Task           @relation(fields: [taskId], references: [id], onDelete: Cascade)
  raffleId    Int
  raffle      Raffle         @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  progress    TaskProgress[]
}

enum MobRace {
  FORMLESS
  UNDEAD
  BEAST
  PLANT
  INSECT
  FISH
  DEMON
  MACHINE
  HUMANOID
  ANGEL
  DRAGON
}

enum MobElement {
  NEUTRAL_1
  WATER_1
  EARTH_1
  FIRE_1
  WIND_1
  POISON_1
  HOLY_1
  SHADOW_1
  GHOST_1
  UNDEAD_1
}

enum MobSize {
  SMALL
  MEDIUM
  LARGE
}

// used to link an item and quantity to a mob, participation, user, quest, etc.
model Loot {
  id                    Int                  @id @default(autoincrement())
  itemId                String
  item                  Item                 @relation(fields: [itemId], references: [id], onDelete: Cascade)
  quantity              Int
  chance                Float
  mvp                   Boolean              @default(false)
  mobId                 Int?
  mob                   Mob?                 @relation(fields: [mobId], references: [id], onDelete: Cascade)
  battleParticipationId Int?
  battleParticipation   BattleParticipation? @relation(fields: [battleParticipationId], references: [id], onDelete: Cascade)
  questId               String?
  quest                 PlatformQuest?       @relation(fields: [questId], references: [id], onDelete: Cascade)

  @@unique([itemId, battleParticipationId])
}

model Mob {
  id          Int        @id @default(autoincrement())
  version     Int        @default(0)
  name        String
  imageUrl    String
  description String
  maxHp       Int
  level       Int
  race        MobRace
  element     MobElement
  size        MobSize
  attack      Int
  defense     Int
  baseExp     Int
  mvpExp      Int
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now()) @updatedAt
  battles     Battle[]
  loot        Loot[]
}

enum BattleStatus {
  PENDING
  ACTIVE
  COMPLETE
  CANCELLED
}

model Battle {
  id            Int                   @id @default(autoincrement())
  status        BattleStatus
  mobId         Int
  mob           Mob                   @relation(fields: [mobId], references: [id], onDelete: Cascade)
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt
  publishAt     DateTime              @default(now())
  health        Int
  participation BattleParticipation[]
}

enum MvpReason {
  MOST_DAMAGE
  MOST_STRIKES
  LAST_HIT
}

model BattleParticipation {
  id        Int        @id @default(autoincrement())
  damage    Int // how much damage the user has done to the mob
  strikes   Int // how many times the user has attacked the mob
  battleId  Int
  battle    Battle     @relation(fields: [battleId], references: [id], onDelete: Cascade)
  // the loot that the user has received from the mob, a user can get multiple items from a mob.
  // a second query will be needed to get the item details.
  loot      Loot[]
  // the mvp can be inferred from the loot distribution but it's easier to simply award the user with the most damage or
  // the last hit the mvp status by toggling this field. the most damage is calculated using the damage field, and the 
  // last hit is calculated using the "struckAt" field.
  isMvp     MvpReason?
  userId    String
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  struckAt  DateTime

  @@unique([userId, battleId])
}

enum IntegrationProvider {
  TWITCH
  TWITTER
  DISCORD
  STEAM
  YOUTUBE
}

enum IntegrationError {
  // TODO: support more error types.
  ACCESS_DENIED
  INVALID_REFRESH_TOKEN
  REDIRECT_MISMATCH
  UNAUTHORIZED_CLIENT
  UNSUPPORTED_RESPONSE_TYPE
  INVALID_SCOPE
  SERVER_ERROR
  TEMPORARILY_UNAVAILABLE
  INVALID_REQUEST
  UNKNOWN
}

enum IntegrationStatus {
  PENDING
  AUTHORIZED
  ERROR
}

enum IntegrationType {
  OAUTH
  API_KEY
}

model Integration {
  id           String              @id @default(cuid())
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  authorizedAt DateTime?
  type         IntegrationType
  status       IntegrationStatus   @default(PENDING)
  error        IntegrationError?
  userId       String
  user         User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  provider     IntegrationProvider
  accessToken  String?
  refreshToken String?
  challenge    String?
  expiresAt    DateTime?
  scopes       String[]            @default([])
  identity     Json?
  data         Json?
  tokenType    String              @default("bearer")

  @@unique([userId, provider]) // a user can only have one integration per provider
}
